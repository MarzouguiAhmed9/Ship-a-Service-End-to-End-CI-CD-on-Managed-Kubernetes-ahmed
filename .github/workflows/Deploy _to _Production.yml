
name: Build, Push & Deploy to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write  # ✅ Added for security scanning

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO: ship-a-service
      IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/ship-a-service

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials via OIDC
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ship-a-service-github-actions-role
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # 3️⃣ Verify AWS credentials
      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity
          echo "✅ AWS authentication successful"
      # 4️⃣ Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 5️⃣ Build Docker image
      - name: Build Docker image
        working-directory: app/src
        run: |
          docker build -t $IMAGE_URI:main .
          docker tag $IMAGE_URI:main $IMAGE_URI:${GITHUB_SHA::8}
      # 6️⃣ Push Docker image
      - name: Push Docker image
        run: |
          docker push $IMAGE_URI:main
          docker push $IMAGE_URI:${GITHUB_SHA::8}
      # 7️⃣ Configure kubectl for EKS
      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name ship-a-service --region $AWS_REGION
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.13.3'

      - name: Helm deploy
        working-directory: charts/app
        run: |
          helm upgrade --install ship-a-service . \
            -f values.dev.yaml \
            --set image.repository=${{ env.IMAGE_URI }} \
            --set image.tag=${GITHUB_SHA::8} \
            --namespace default \
            --create-namespace \
            --wait \
            --timeout 5m
      - name: Debug - List all resources
        run: |
          echo "=== Helm Release Status ==="
          helm status ship-a-service -n default
          
          echo ""
          echo "=== All Deployments ==="
          kubectl get deployments -n default -o wide
          
          echo ""
          echo "=== All Pods ==="
          kubectl get pods -n default -o wide
          
          echo ""
          echo "=== Describe Deployment (if exists) ==="
          kubectl describe deployment ship-a-service -n default || echo "Deployment not found"
          
          echo ""
          echo "=== Helm Manifest ==="
          helm get manifest ship-a-service -n default | grep -A 20 "kind: Deployment"
      - name: Check deployment status
        run: |
          echo "Checking deployment rollout..."
          kubectl rollout status deployment/ship-a-service-app -n default --timeout=120s
          
          echo "Deployment resources:"
          kubectl get all -n default -l app=app
          
          echo "Pod details:"
          kubectl describe pods -n default -l app=app
      # ========================================
      # NEW: SECURITY & REPORTING
      # ========================================
      
      # Generate SBOM
      - name: Generate SBOM
        if: success()
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft $IMAGE_URI:${GITHUB_SHA::8} -o spdx-json > sbom.json
      # Scan vulnerabilities
      - name: Scan vulnerabilities
        if: success()
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype $IMAGE_URI:${GITHUB_SHA::8} -o sarif > vulnerabilities.sarif
          grype $IMAGE_URI:${GITHUB_SHA::8} || true
      # Upload to GitHub Security
      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        if: success()
        with:
          sarif_file: vulnerabilities.sarif

      # Upload SBOM artifact
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: sbom-${{ github.sha }}
          path: sbom.json
          retention-days: 90

      # Generate deployment report
      - name: Generate deployment report
        if: always()
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S')
          HELM_REV=$(helm list -n default -o json | jq -r '.[0].revision')
          
          cat > report.md << EOF
          # 🚀 Deployment Report
          
          **Image**: \`$IMAGE_URI:${GITHUB_SHA::8}\`  
          **Helm Revision**: \`$HELM_REV\`  
          **Deployed by**: @${{ github.actor }}  
          **Time (UTC)**: $TIMESTAMP  
          **Trigger**: ${{ github.event_name == 'workflow_dispatch' && '🖱️ Manual' || '📝 Push' }}
          
          ## 🔗 Links
          - [Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [SBOM](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Security](${{ github.server_url }}/${{ github.repository }}/security/code-scanning)
          EOF
          
          cat report.md >> $GITHUB_STEP_SUMMARY