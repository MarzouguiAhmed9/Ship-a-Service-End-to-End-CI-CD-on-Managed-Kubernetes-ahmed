name: Build, Push & Deploy to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      ECR_REPO: ship-a-service
      IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/ship-a-service

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Authenticate to AWS via OIDC role
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ship-a-service-github-actions-role
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # 3️⃣ Log in to ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $IMAGE_URI

      # 4️⃣ Build Docker image
      - name: Build Docker image
        working-directory: app/src
        run: |
          docker build -t $IMAGE_URI:main .
          docker tag $IMAGE_URI:main $IMAGE_URI:${GITHUB_SHA::8}

      # 5️⃣ Push Docker image
      - name: Push Docker image to ECR
        run: |
          docker push $IMAGE_URI:main
          docker push $IMAGE_URI:${GITHUB_SHA::8}

      # 6️⃣ Setup kubectl
      - name: Configure kubectl
        uses: aws-actions/configure-kubectl@v2
        with:
          cluster-name: ship-a-service
          region: ${{ secrets.AWS_DEFAULT_REGION }}

      # 7️⃣ Helm deploy to dev
      - name: Deploy Helm chart to dev
        working-directory: charts/app
        run: |
          helm upgrade --install ship-a-service . \
            -f values.dev.yaml \
            --set image.repository=$IMAGE_URI \
            --set image.tag=${GITHUB_SHA::8} \
            --wait --timeout 5m

      # 8️⃣ Health check
      - name: Post-deploy health check
        run: |
          URL=$(kubectl get svc ship-a-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$URL/healthz)
          if [ "$STATUS" != "200" ]; then
            echo "Deployment failed: /healthz returned $STATUS"
            exit 1
          fi
