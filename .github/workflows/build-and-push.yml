name: Build & Push Docker to ECR (On Merge to main)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REPO: ship-a-service
      IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/ship-a-service

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # 3️⃣ Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      # 4️⃣ Build Docker image
      - name: Build Docker image
        working-directory: app/src
        run: |
          docker build -t $IMAGE_URI:main .
          docker tag $IMAGE_URI:main $IMAGE_URI:${GITHUB_SHA::8}

      # 5️⃣ Push Docker image
      - name: Push Docker image
        run: |
          docker push $IMAGE_URI:main
          docker push $IMAGE_URI:${GITHUB_SHA::8}

      # 6️⃣ Output tags for reference
      - name: Show pushed image tags
        run: |
          echo "Pushed images:"
          echo "$IMAGE_URI:main"
          echo "$IMAGE_URI:${GITHUB_SHA::8}"

      # ========================================
      # 7️⃣ TERRAFORM APPLY
      # ========================================
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: infra/terraform
        run: terraform plan -out=tfplan


      # ========================================
      # 8️⃣ DEPLOY TO DEV WITH HELM
      # ========================================
      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
          sudo install kubectl /usr/local/bin/

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.13.3'

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name ship-a-service --region $AWS_REGION

      - name: Deploy to Dev with Helm
        working-directory: charts/app
        run: |
          for i in {1..3}; do
            helm upgrade --install ship-a-service . \
              -f values.dev.yaml \
              --set image.repository=$IMAGE_URI \
              --set image.tag=${GITHUB_SHA::8} \
              --namespace default \
              --create-namespace \
              --wait \
              --atomic \
              --timeout 5m && break
            echo "Helm busy, retrying in 10s..."
            sleep 10
          done

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/ship-a-service-app -n default --timeout=120s
          kubectl get pods -n default -l app=app

      # ========================================
      # 9️⃣ POST-DEPLOY SMOKE TEST
      # ========================================
      - name: Smoke Test - Health Check
        run: |
          echo "🔍 Running smoke test..."
          
          SERVICE_NAME="ship-a-service-app"
          
          kubectl wait --for=condition=ready pod -l app=app -n default --timeout=120s
          
          kubectl port-forward -n default svc/$SERVICE_NAME 8080:8080 &
          PF_PID=$!
          sleep 5
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthz || echo "000")
          kill $PF_PID || true
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Health check passed (HTTP $RESPONSE)"
          else
            echo "❌ Health check failed (HTTP $RESPONSE)"
            exit 1
          fi

      # ========================================
      # 🔟 GENERATE DEPLOYMENT REPORT
      # ========================================
      - name: Generate Deployment Report
        if: always()
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S')
          HELM_REV=$(helm list -n default -o json | jq -r '.[0].revision')
          
          cat > report.md << EOF
          # 🚀 Deployment Report
          
          **Image**: \`$IMAGE_URI:${GITHUB_SHA::8}\`  
          **Helm Revision**: \`$HELM_REV\`  
          **Deployed by**: @${{ github.actor }}  
          **Environment**: Development  
          **Time (UTC)**: $TIMESTAMP  
          **Trigger**: ${{ github.event_name == 'workflow_dispatch' && '🖱️ Manual' || '📝 Push' }}
          
          ## ✅ Pipeline Steps
          - Build & Push: ✅
          - Terraform Apply: ✅
          - Helm Deploy: ✅
          - Smoke Test: ✅
          
          ## 🔗 Links
          - [Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [ECR Repository](https://${{ env.AWS_REGION }}.console.aws.amazon.com/ecr/repositories/private/${{ env.AWS_ACCOUNT_ID }}/${{ env.ECR_REPO }})
          - [EKS Cluster](https://${{ env.AWS_REGION }}.console.aws.amazon.com/eks/home?region=${{ env.AWS_REGION }}#/clusters/ship-a-service)
          EOF
          
          cat report.md >> $GITHUB_STEP_SUMMARY
